server {
    listen 80; # Add 'http2' here if you want to explicitly enable it for internal Nginx
    server_name localhost; # This is fine as it's internal to Docker

    # Define root for all locations once, can be overridden
    root /usr/share/nginx/html;
    index index.html index.htm;

    # --- Text Compression ---
    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types
        text/plain
        text/css
        application/json
        application/javascript # For .js files
        application/x-javascript # Older type for .js
        text/xml
        application/xml
        application/xml+rss
        text/javascript # Another alias for JS
        image/svg+xml # SVG images are text-based XML
        application/manifest+json # For your webmanifest
        application/wasm;

    # --- MIME Types ---
    # include /etc/nginx/mime.types; # Usually included in main nginx.conf, but good to ensure
    # types { # If mime.types doesn't have mjs or webmanifest, add them here or in mime.types
    #     application/javascript js mjs;
    #     application/manifest+json webmanifest;
    # }
    # For Alpine Nginx, mime.types should be fairly comprehensive.
    # If you find specific types aren't served correctly, you can add them here.

    # --- Caching for Versioned Static Assets ---
    # Assuming Vite/Vue CLI puts hashed assets into an 'assets' subfolder.
    # Adjust the path if your build output structure is different.
    location /assets/ {
        try_files $uri =404; # Serve existing files or 404
        expires 1y;
        add_header Cache-Control "public, immutable";
        # Access log off for static assets can reduce noise, optional
        # access_log off; 
    }

    # --- Caching for Other Static Assets (images, fonts, etc.) ---
    # Adjust extensions as needed
    location ~* \.(?:jpg|jpeg|gif|png|ico|webp|svg|woff|woff2|ttf|eot|otf)$ {
        try_files $uri =404;
        expires 1M;
        add_header Cache-Control "public";
        # access_log off;
    }
    
    # --- Caching for manifest.webmanifest ---
    # If not covered by /assets/ and needs specific headers
    location = /manifest.webmanifest {
        try_files $uri =404;
        add_header Cache-Control "public, max-age=3600"; # Cache for 1 hour, revalidate
        add_header Content-Type application/manifest+json; # Ensure correct MIME type
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'strict-dynamic' 'nonce-$request_id'; style-src 'self' 'nonce-$request_id'; object-src 'none'; base-uri 'self';" always;
    }
    
    # --- Caching for favicon.ico ---
    location = /favicon.ico {
        try_files $uri =404;
        expires 1M;
        add_header Cache-Control "public";
        # access_log off;
    }


    # --- Main location for SPA routing ---
    location / {
        try_files $uri $uri/ /index.html;
        # For index.html, we want browsers to revalidate
        add_header Cache-Control "no-cache, must-revalidate";
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'strict-dynamic' 'nonce-$request_id'; style-src 'self' 'nonce-$request_id'; object-src 'none'; base-uri 'self'; frame-ancestors 'none';" always;
        expires 0; # Or a very short time like 1m
    }

    # --- API Proxy (if frontend Nginx is responsible for it) ---
    # If NPM handles direct proxying to both frontend and API on different subdomains,
    # this block might not be needed here, and your Vue app would call the full API URL.
    # If your Vue app calls relative /api/v1/ paths, this block is needed.
    location /api/v1/ {
        proxy_pass http://phentrieve_api:8000; # Assumes phentrieve_api is the service name of your API backend
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Optional: Proxy timeouts
        # proxy_connect_timeout 60s;
        # proxy_send_timeout   60s;
        # proxy_read_timeout   60s;
    }

    # --- Error pages ---
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        # root /usr/share/nginx/html; # Already defined globally
    }
}